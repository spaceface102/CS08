 ---Introduction
 
--1.1 Algorithms
-algorithm = sequence of computational steps that transform
    the input into the output
    i)used to solve well specified computational problems
-a problem specifies the specific inp-ut and output relationship
    and an algorithm is the computational procedures that will
    result in that relationship
-This is how the book "formally" defines the sorting problem:
    i)Input: A sequence of n numbers <a1, a2, ..., an>
    ii)Output: A permutation (reordering) <a'1, a'2, ..., a'n> of
        the input sequence such that a'1 <= a'2 <= ... <= a'n
-instance = a possible valid input to the problem (for example
    an instance of the sorting problem might be <1, 34, 45, 9>)
    i)an instance includes all the inputs needed to satisfy the
        constraints of a problem
-correct algorithm = every instance, the algorithm halts with
    the correct output (for the specific defined problem)
-"we say that a correct solves the given computational problem"
-ex of incorrect algorithms: non-halting algorithm, halt with
    an undesired output
-there are no constraints as to what medium you use to define
    an algorithm, (software, hardware, human language), the one
    thing that DOES NEED TO BE MET, "is that the specification
    must provide a precise description of the computational
    procedure to be followed"
-sort in place = no extra memory is used, the numbers are
    rearranged within the passed in array. At most, a constant
    amount of extra memory is used (say the index variables, 
    a key variable, etc).

--Insertion Sort
-sorts in place
-an efficient algorithm for sorting a small number of elements
-the passed in array contains the sorted output sequence
    when insertion sort is finished

--Book Specific Algorithm Representation
-array indexing starts at 1 (instead of 0)
-length[A] gives you the number of elements in the array
